{"version":3,"sources":["client/client.js","components/pagination/pagination.tsx","utils/date.ts","components/launch-list/launch-list.tsx","components/header/header.tsx","components/info-table/InfoTable.tsx","components/launch-detail/launch-detail.tsx","App.tsx","index.tsx"],"names":["client","ApolloClient","uri","cache","InMemoryCache","Pagination","currentPage","setCurrentPage","limit","maxPages","Math","ceil","className","onClick","getPrevPage","getNextPage","launchDate","date","Date","year","getFullYear","month","getMonth","dt","getDate","GET_LAUNCHES_PAST","gql","LaunchList","useState","useQuery","variables","offset","loading","data","launchesPast","map","id","mission_name","launch_date_local","details","links","mission_patch_small","alt","src","to","Header","InfoTable","label","Object","entries","prop","value","GET_LAUNCH","LaunchDetail","props","match","params","launch","launch_success","launch_site","rocket","rocket_name","payloads","second_stage","summaryLaunchDetail","site","site_name","missionPayloads","type","payload_type","weight","payload_mass_lbs","orbit","reused","App","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac84125a.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client';\r\n\r\n\r\nconst client = new ApolloClient({\r\n   uri: 'https://api.spacex.land/graphql/',\r\n  cache: new InMemoryCache()});\r\n\r\nexport default client","import React from 'react';\r\n\r\nimport './pagination.css';\r\n\r\ninterface PaginationProps {\r\n  currentPage: number;\r\n  setCurrentPage: (currentPage: number) => void;\r\n  limit: number;\r\n}\r\n\r\nconst Pagination: React.FunctionComponent<PaginationProps> = ({currentPage, setCurrentPage, limit}) => {\r\n  const maxPages = Math.ceil(109 / limit);\r\n\r\n  const getPrevPage = (currentPage: number, setCurrentPage: (currentPage: number) => void) => {\r\n    if (currentPage > 1) {\r\n      setCurrentPage(currentPage - 1);\r\n    }\r\n  };\r\n\r\n  const getNextPage = (currentPage: number, setCurrentPage: (currentPage: number) => void) => {\r\n    setCurrentPage(currentPage + 1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"pagination\">\r\n      <div>Current Page: {currentPage}</div>\r\n      <button onClick={() => getPrevPage(currentPage, setCurrentPage)}>\r\n        Previous Page\r\n      </button>\r\n      <button onClick={() => getNextPage(currentPage, setCurrentPage)}>\r\n        Next Page\r\n      </button>\r\n      <div>Total Number of Pages: {maxPages}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","//Converting date format\r\nexport const launchDate = (launchDate: Date): string => {\r\n  const date = new Date(launchDate);\r\n  const year = date.getFullYear();\r\n  let month: number | string = date.getMonth()+1;\r\n  let dt: number | string= date.getDate();\r\n\r\n  if (dt < 10) {\r\n  dt = '0' + dt;\r\n  }\r\n  if (month < 10) {\r\n  month = '0' + month;\r\n  }  \r\n  return(year +'-' + month + '-' + dt)\r\n}","import React, { useState } from 'react';\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport { Link } from 'react-router-dom';\r\nimport Pagination from '../pagination/pagination';\r\n\r\nimport { launchDate } from '../../utils/date';\r\nimport './launch-list.css';\r\n\r\nconst GET_LAUNCHES_PAST = gql`\r\n  query LaunchPastQuery($offset: Int, $limit: Int) {\r\n    launchesPast(offset: $offset, limit: $limit) {\r\n      mission_name\r\n      launch_date_local\r\n      links {\r\n        mission_patch_small\r\n      }\r\n      details\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\ninterface LaunchDateProps {\r\n  id: number; \r\n  mission_name: string;\r\n  launch_date_local: Date;\r\n  details: string;\r\n  links: {mission_patch_small: string};  \r\n}\r\n\r\nconst LaunchList: React.FC<LaunchDateProps> = () => {\r\n  const [currentPage, setCurrentPage] = useState(2);\r\n  const limit: number = 6;\r\n\r\n  const { loading, data } = useQuery(GET_LAUNCHES_PAST, {\r\n    variables: {\r\n      offset: (currentPage - 1) * limit,\r\n      limit,\r\n    },\r\n  });\r\n\r\n  if (loading) return <p>Loading ...</p>;\r\n  return (\r\n    <div>\r\n      <div className=\"launch-list\">\r\n        {data.launchesPast.map(\r\n          ({ id, mission_name, launch_date_local, details, links }: LaunchDateProps) => (\r\n            <div className=\"launch-card\" key={id}>\r\n              <div className=\"launch-card-header\">\r\n                {links.mission_patch_small ? (\r\n                  <div className=\"card-header-img\">\r\n                    <img\r\n                      alt=\"launch\"\r\n                      src={`${links.mission_patch_small}?set=set2&size=180x180`}\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  <div></div>\r\n                )}\r\n                <div className=\"card-header-details\">\r\n                  <div>{mission_name}</div>\r\n                  <div>{`Date: ${launchDate(launch_date_local)}`}</div>\r\n                </div>\r\n              </div>\r\n              <div className=\"launch-card-details\">\r\n                <p className=\"card-details-content\">{details}</p>\r\n                <button className=\"card-details-button\">\r\n                  <Link to={`/launch/${id}`}>More details</Link>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )\r\n        )}\r\n      </div>\r\n      <Pagination\r\n        currentPage={currentPage}\r\n        setCurrentPage={setCurrentPage}\r\n        limit={limit}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LaunchList;\r\n","import React from 'react';\r\n\r\nimport './header.css';\r\n\r\nconst Header: React.FC = () => {\r\n\r\n  return (\r\n    <div className='header'>\r\n      <h1>Space-X Launches</h1>   \r\n        <div className=\"header-img\">\r\n          <p className=\"header-box\">Curios about Space-x launches? Check all the past launches here!</p>          \r\n        </div>         \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nimport './info-table.css';\r\n\r\n\r\nconst InfoTable: React.FC<{label: any, data: any }> = ({data, label}) => {\r\n  return (\r\n    <div className=\"info-table\">\r\n      {Object.entries(data).map(([prop, value]) => (\r\n        <div className=\"info-table-float\" key={prop}>\r\n          <div className=\"launch-detail-info-name\">{label[prop]}</div>\r\n          <div className=\"launch-detail-info-data\">{value}</div>    {/* How to fix this error */}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoTable;\r\n","import { gql, useQuery } from '@apollo/client';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { launchDate } from '../../utils/date';\r\nimport InfoTable from '../info-table/InfoTable';\r\n\r\nimport './launch-detail.css';\r\n\r\nconst GET_LAUNCH = gql`\r\n  query LaunchQuery($id: ID!) {\r\n    launch(id: $id) {\r\n      id\r\n      details\r\n      launch_success\r\n      mission_name\r\n      launch_date_local\r\n      rocket {\r\n        rocket_name\r\n        second_stage {\r\n          payloads {\r\n            orbit\r\n            payload_type\r\n            payload_mass_lbs\r\n            reused\r\n          }\r\n        }\r\n      }\r\n      launch_site {\r\n        site_name\r\n      }\r\n      links {\r\n        mission_patch_small\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\ninterface MatchParams {\r\n  match: { params: { id: number } };\r\n}\r\n\r\ninterface MatchDetailProps {\r\n  id: number;\r\n  details: string;\r\n  launch_success: boolean;\r\n  mission_name: string;\r\n  launch_date_local: Date;\r\n  links: { mission_patch_small: string };\r\n  launch_site: { site_name: string };\r\n  rocket_name: string;\r\n  second_stage: { payloads: Payloads[] };\r\n}\r\n\r\ninterface Payloads {\r\n  orbit: string;\r\n  payload_type: string;\r\n  payload_mass_lbs: number;\r\n  reused: boolean;\r\n}\r\n\r\nconst LaunchDetail: React.FC<MatchParams> = (props: MatchParams) => {\r\n  const { data } = useQuery(GET_LAUNCH, {\r\n    variables: { id: props.match.params.id },\r\n  });\r\n\r\n  if (!data) return <p>Loading ...</p>;\r\n\r\n  const { launch } = data;\r\n  const {\r\n    id,\r\n    details,\r\n    launch_success,\r\n    mission_name,\r\n    launch_date_local,\r\n    links,\r\n    launch_site,\r\n  }: MatchDetailProps = launch;\r\n  const {\r\n    rocket_name,\r\n    second_stage: { payloads },\r\n  }: MatchDetailProps = launch.rocket;\r\n\r\n  const summaryLaunchDetail = {\r\n    date: launchDate(launch_date_local),\r\n    site: launch_site.site_name,\r\n    rocket: rocket_name,\r\n  };\r\n  const summaryLaunchDetailLabel = {\r\n    date: 'Launch Date',\r\n    site: 'Launch Site',\r\n    rocket: 'Rocket Type',\r\n  };\r\n  const missionPayloads = {\r\n    type: payloads[0].payload_type,\r\n    weight: payloads[0].payload_mass_lbs,\r\n    orbit: payloads[0].orbit,\r\n    reused: `${payloads[0].reused}` ? ' Yes' : ' No',\r\n  };\r\n  const missionPayloadsLabel = {\r\n    type: 'Type',\r\n    weight: 'Weight',\r\n    orbit: 'Orbit',\r\n    reused: 'Reused',\r\n  };\r\n\r\n  return (\r\n    <div className=\"launch-detail\">\r\n      <div className=\"back-button\">\r\n        <Link to=\"/space-x/\">Back</Link>\r\n      </div>\r\n      <h1>Mission Summary</h1>\r\n      <div className=\"launch-detail-summary\">\r\n        <div className=\"launch-detail-card-header\">\r\n          {launch_success ? (\r\n            <div className=\"launch-detail-successful\">Successful</div>\r\n          ) : (\r\n            <div className=\"launch-detail-not-successful\">Not Successful</div>\r\n          )}\r\n          <div>{id}</div>\r\n        </div>\r\n        <div className=\"launch-detail-card-body\">\r\n          {links.mission_patch_small ? (\r\n            <div className=\"launch-detail-img\">\r\n              <img\r\n                alt=\"launch\"\r\n                src={`${links.mission_patch_small}?set=set2&size=180x180`}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <div></div>\r\n          )}\r\n          <div className=\"launch-detail-text\">\r\n            <h3>{mission_name}</h3>\r\n            <p>{details}</p>\r\n          </div>\r\n          <InfoTable\r\n            data={summaryLaunchDetail}\r\n            label={summaryLaunchDetailLabel}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"launch-detail-info\">\r\n        <h1>Mission Payloads Details</h1>\r\n        <InfoTable label={missionPayloadsLabel} data={missionPayloads} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LaunchDetail;\r\n","import React from 'react'\nimport {  Switch, Route } from \"react-router-dom\";\n\nimport LaunchList from './components/launch-list/launch-list';\nimport Header from './components/header/header';\nimport LaunchDetail from './components/launch-detail/launch-detail';\n\nimport './App.css';\n\nconst App: React.FC = () => {\n\n  return (\n    <div className=\"App\">\n        <Header />        \n          <Switch>\n            <Route exact path='/space-x/' component={LaunchList}/>\n            <Route path=\"/launch/:id\" component={LaunchDetail}/>\n          </Switch>  \n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ApolloProvider } from \"@apollo/client\";\nimport client from './client/client';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport App from './App'; \n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Router>\n        <App />\n      </Router>         \n    </ApolloProvider>    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}